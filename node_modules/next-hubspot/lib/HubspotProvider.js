import React, { createContext, useContext, useDebugValue, useState, useEffect, useCallback, useMemo } from 'react';
import NextScript from 'next/script.js';

// https://github.com/vercel/next.js/issues/46078
const Script = NextScript;
const HubspotContext = createContext({
    loaded: false,
    error: false,
});
const useHubspotContext = () => {
    const values = useContext(HubspotContext);
    useDebugValue(`Hubspot Script: ${values?.loaded ? "Loaded" : "Not Loaded"}`);
    useDebugValue(`Failed to load Script: ${values?.error ? "Yes" : "No"}`);
    return values;
};
/** Loads Hubspot script to the document and syncs loading state between forms on the page */
const HubspotProvider = ({ children, id = "hubspotScript", src = "https://js.hsforms.net/forms/v2.js", strategy = "afterInteractive", onLoad: passedOnLoad, onError: passedOnError, ...props }) => {
    const [loaded, setLoaded] = useState(false);
    const [error, setError] = useState(false);
    // Reset state when script src is changed
    useEffect(() => {
        setLoaded(false);
        setError(false);
    }, [src]);
    // Handle script load
    const onLoad = useCallback((e) => {
        setLoaded(true);
        passedOnLoad?.(e);
    }, [passedOnLoad]);
    // Handle script error
    const onError = useCallback((e) => {
        setError(true);
        passedOnError?.(e);
    }, [passedOnError]);
    // Prevent unnecessary rerenders
    const value = useMemo(() => ({ loaded, error }), [loaded, error]);
    return (React.createElement(HubspotContext.Provider, { value: value },
        children,
        React.createElement(Script, { id: id, src: src, strategy: strategy, onLoad: onLoad, onError: onError, ...props })));
};

export { HubspotContext, HubspotProvider, useHubspotContext };
